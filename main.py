import hashlib
import json
from time import time
from urllib.parse import urlparse
from uuid import uuid4

import requests
from flask import Flask, jsonify, request

class Blockchain:
    def __init__(self):
        self.current_transactions = []
        self.chain = []
        self.nodes = set()

        # Create the genesis block (first block in the blockchain)
        self.new_block(previous_hash='1', proof=100)

    def register_node(self, address):
        """
        Register a new node to the network.

        :param address: The address of the node, e.g., 'http://192.168.0.5:5000'
        :raises ValueError: If the URL is invalid
        """
        parsed_url = urlparse(address)
        if parsed_url.netloc:
            self.nodes.add(parsed_url.netloc)
        elif parsed_url.path:
            # Accept a URL without a scheme, e.g., '192.168.0.5:5000'
            self.nodes.add(parsed_url.path)
        else:
            raise ValueError('Invalid URL')

    def valid_chain(self, chain):
        """
        Verify the integrity of a given blockchain.

        :param chain: The blockchain to verify
        :return: True if the chain is valid, False otherwise
        """
        last_block = chain[0]
        current_index = 1

        while current_index < len(chain):
            block = chain[current_index]

            # Verify the hash of the previous block
            last_block_hash = self.hash(last_block)
            if block['previous_hash'] != last_block_hash:
                return False

            # Verify the Proof of Work
            if not self.valid_proof(last_block['proof'], block['proof'], last_block_hash):
                return False

            last_block = block
            current_index += 1

        return True

    def resolve_conflicts(self):
        """
        Resolve conflicts by replacing our chain with the longest one in the network.

        :return: True if the chain was replaced, False if it remains the same
        """
        neighbors = self.nodes
        new_chain = None

        # Look for chains longer than our own
        max_length = len(self.chain)

        for node in neighbors:
            response = requests.get(f'http://{node}/chain')

            if response.status_code == 200:
                length = response.json()['length']
                chain = response.json()['chain']

                # Replace if a longer, valid chain is found
                if length > max_length and self.valid_chain(chain):
                    max_length = length
                    new_chain = chain

        if new_chain:
            self.chain = new_chain
            return True

        return False

    def new_block(self, proof, previous_hash=None):
        """
        Create a new block in the blockchain.

        :param proof: The proof generated by the Proof of Work algorithm
        :param previous_hash: Hash of the previous block (optional)
        :return: The newly created block
        """
        block = {
            'index': len(self.chain) + 1,
            'timestamp': time(),
            'transactions': self.current_transactions,
            'proof': proof,
            'previous_hash': previous_hash or self.hash(self.chain[-1]),
        }

        # Reset the list of transactions
        self.current_transactions = []

        self.chain.append(block)
        return block

    def new_transaction(self, sender, recipient, amount):
        """
        Add a new transaction to the list of transactions.

        :param sender: Address of the sender
        :param recipient: Address of the recipient
        :param amount: Amount to be transferred
        :return: The index of the block that will store this transaction
        """
        self.current_transactions.append({
            'sender': sender,
            'recipient': recipient,
            'amount': amount,
        })

        return self.last_block['index'] + 1

    @property
    def last_block(self):
        """
        Retrieve the last block in the blockchain.

        :return: The last block in the chain
        """
        return self.chain[-1]

    @staticmethod
    def hash(block):
        """
        Generate a SHA-256 hash of a block.

        :param block: The block to hash
        :return: The hash value as a string
        """
        block_string = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()

    def proof_of_work(self, last_block):
        """
        Perform the Proof of Work algorithm to find the next proof.

        :param last_block: The last block in the chain
        :return: The proof for the new block
        """
        last_proof = last_block['proof']
        last_hash = self.hash(last_block)

        proof = 0
        while not self.valid_proof(last_proof, proof, last_hash):
            proof += 1

        return proof

    @staticmethod
    def valid_proof(last_proof, proof, last_hash):
        """
        Validate the proof by checking if the hash has the required number of leading zeroes.

        :param last_proof: The proof of the last block
        :param proof: The current proof being validated
        :param last_hash: The hash of the last block
        :return: True if the proof is valid, False otherwise
        """
        guess = f'{last_proof}{proof}{last_hash}'.encode()
        guess_hash = hashlib.sha256(guess).hexdigest()
        return guess_hash[:4] == "0000"


# Initialize the Flask application
app = Flask(__name__)

# Generate a unique identifier for this node
node_identifier = str(uuid4()).replace('-', '')

# Initialize the blockchain
blockchain = Blockchain()


@app.route('/mine', methods=['GET'])
def mine():
    """
    Handle the mining of a new block.

    :return: A JSON response with the details of the newly mined block
    """
    last_block = blockchain.last_block
    proof = blockchain.proof_of_work(last_block)

    # Reward for finding the proof (sender is "0" to signify new coin creation)
    blockchain.new_transaction(
        sender="0",
        recipient=node_identifier,
        amount=1,
    )

    # Create the new block and add it to the chain
    previous_hash = blockchain.hash(last_block)
    block = blockchain.new_block(proof, previous_hash)

    response = {
        'message': "New Block Forged",
        'index': block['index'],
        'transactions': block['transactions'],
        'proof': block['proof'],
        'previous_hash': block['previous_hash'],
    }
    return jsonify(response), 200


@app.route('/transactions/new', methods=['POST'])
def new_transaction():
    """
    Create a new transaction.

    :return: A JSON response indicating the transaction will be added to the next block
    """
    values = request.get_json()

    # Check that the required fields are in the request data
    required = ['sender', 'recipient', 'amount']
    if not all(k in values for k in required):
        return 'Missing values', 400

    # Add the new transaction to the blockchain
    index = blockchain.new_transaction(values['sender'], values['recipient'], values['amount'])

    response = {'message': f'Transaction will be added to Block {index}'}
    return jsonify(response), 201


@app.route('/chain', methods=['GET'])
def full_chain():
    """
    Retrieve the entire blockchain.

    :return: A JSON response with the full blockchain and its length
    """
    response = {
        'chain': blockchain.chain,
        'length': len(blockchain.chain),
    }
    return jsonify(response), 200


@app.route('/nodes/register', methods=['POST'])
def register_nodes():
    """
    Register new nodes to the blockchain network.

    :return: A JSON response with the list of registered nodes
    """
    values = request.get_json()

    nodes = values.get('nodes')
    if nodes is None:
        return "Error: Please supply a valid list of nodes", 400

    for node in nodes:
        blockchain.register_node(node)

    response = {
        'message': 'New nodes have been added',
        'total_nodes': list(blockchain.nodes),
    }
    return jsonify(response), 201


@app.route('/nodes/resolve', methods=['GET'])
def consensus():
    """
    Implement the consensus algorithm to resolve conflicts and maintain the longest chain.

    :return: A JSON response indicating whether the chain was replaced
    """
    replaced = blockchain.resolve_conflicts()

    if replaced:
        response = {
            'message': 'Our chain was replaced',
            'new_chain': blockchain.chain
        }
    else:
        response = {
            'message': 'Our chain is authoritative',
            'chain': blockchain.chain
        }

    return jsonify(response), 200


if __name__ == '__main__':
    from argparse import ArgumentParser

    # Parse the port argument from the command line
    parser = ArgumentParser()
    parser.add_argument('-p', '--port', default=5000, type=int, help='Port to listen on')
    args = parser.parse_args()
    port = args.port

    # Start the Flask application
    app.run(host='0.0.0.0', port=port)
